#!/usr/bin/env ruby
require "optparse"

def setup
  log "Installing gems"
  # Only do bundle install if the much-faster
  # bundle check indicatates we need to
  system! "bundle check || bundle install"

  log "Dropping & creating the development database"
  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate
  system! "bin/rails db:reset || bin/rails db:migrate"

  log "Dropping & recreating the test database"
  # setting the RAILS_ENV explicitly to be sure
  # we actually reset the test database
  system!({ "RAILS_ENV" => "test"}, "bin/rails db:reset")

  log "All set up."
  log ""
  log "To see commonly-needed commands, run:"
  log ""
  log "     bin/setup help"
  log ""
end

def help
  puts "Usage: #{$0}"
  puts ""
  puts "Installs gems, recreates dev database, and generally"
  puts "prepares the app to run locally"
  puts ""
  puts "Other useful commands:"
  puts ""
  puts "  bin/dev"
  puts "     # run app locally"
  puts "  LOGRAGE_IN_DEVELOPMENT=true bin/dev"
  puts "      # run app locally using"
  puts "      # production-like logging"
  puts ""
  puts "  bin/ci"
  puts "    # run all tests and checks as CI would"
  puts ""
  puts "  bin/rails test"
  puts "    # run non-system tests"
  puts ""
  puts "  bin/rails test:system"
  puts "    # run system tests"
  puts ""
  puts "  bin/setup help"
  puts "    # show this help"
  puts ""
end

# start of helpers

def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeded"
  else
    log "#{args} failed"
    abort
  end
end

# It's helpful to know what messages came from this
# script, so we'll use log instead of 'puts'
def log(message)
  puts "[ bin/setup ] #{message}"
end

# end of helpers


OptionParser.new do |parser|
  parser.on("-h", "--help") do
    help
    exit
  end
end.parse!

if ARGV[0] == "help"
  help
elsif !ARGV[0].nil?
  puts "Unknown argument: '#{ARGV[0]}'"
  exit 1
else
  setup
end